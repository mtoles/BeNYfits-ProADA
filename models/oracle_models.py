import random
from utils import *
import numpy as np
from typing import List, Dict, Tuple, Union, Optional
import pandas as pd
import os
from json import loads
import nltk


class OracleModel:
    """
    Model to answer questions generated by the primary model. Answers are sentences selected from the original document. Subclass this model.
    """

    def __init__(self):
        pass

    def forward(self, document: str, question: str) -> str:
        # subclass this method
        return self.split_doc_to_sentences(document)[0]

class GPTOracleModel(OracleModel):
    def __init__(self, use_cache):
        self.use_cache = use_cache
        self.no_answer_str = "GPT-4 did not return a valid sentence"

    def forward(
        self,
        document: str,
        question: str,
        temperature: float,
        model="gpt-4-1106-preview",
    ) -> str:
        """
        Use the OpenAI API to answer a question given a document. Return the selected sentence.

        Parameters:
            document (str): the full document
            question (str): the question
            temperature (float): the temperature to use for the GPT model
            model (str): the name of the OpenAI model to use

        Returns:
            str: the selected sentence
        """
        lm_input = f"Context: {document}\n\nQuestion:{question}\n\nWhich single sentence from the document best answers the question? Return the sentence itself, exactly, in JSON format, as in {{'answer': 'The sentence.'}}"
        completion = conditional_openai_call(
            x=lm_input,
            use_cache=self.use_cache,
            model=model,
            temperature=temperature,
            response_format="json",
        )
        # Tokenize the answer and return the first sentence
        answer = nltk.sent_tokenize(
            loads(completion.choices[0].message.content)["answer"]
        )[0]
        # Check that the answer is actually a sentence in the document
        if answer.lower() not in document.lower():
            answer = self.no_answer_str
        return answer

# testing
if __name__ == "__main__":
    document = "My name is Matt. I wrote this code. I am a student at Columbia University."
    question1 = "What is my name?"
    question2 = "What did I write?"
    question3 = "Where do I go to school?"
    model = GPTOracleModel(use_cache=False)
    print(model.forward(document, question1, 0.7))
    print(model.forward(document, question2, 0.7))
    print(model.forward(document, question3, 0.7))


